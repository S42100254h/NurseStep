name: Deploy to Amazon ECS
on:
  pull_request:
    branches:
      - master
    types: [closed]

env:
  AWS_DEFAULT_REGION: ap-northeast-1
  AWS_ECR_REPO_RAILS: pean-rails
  AWS_ECR_REPO_NGINX: pean-nginx
  ECS_TASK_DEFINITION: peanTask
  CONTAINER_NAME_RAILS: rails
  CONTAINER_NAME_NGINX: nginx
  SERVICE_NAME: FargateService
  CLUSTER_NAME: PeanCluster

jobs:
  build_rails:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      image: ${{ steps.rails-image.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache-rails
          key: ${{ runner.os }}-buildx-rails-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-rails-

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        uses: docker/build-push-action@v2
        id: rails-image
        with:
          context: .
          platforms: linux/arm64
          push: true
          file: ./Dockerfile
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPO_RAILS }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache-rails
          cache-to: type=local,dest=/tmp/.buildx-cache-rails-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache-rails
          mv /tmp/.buildx-cache-rails-new /tmp/.buildx-cache-rails

  build_nginx:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    defaults:
      run:
        working-directory: ./front
    outputs:
      image: ${{ steps.nginx-image.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Create env file
        run: |
          touch .env
          echo REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }} >> .env
          echo REACT_APP_PUBLIC_URL=${{ secrets.REACT_APP_PUBLIC_URL }} >> .env

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache-nginx
          key: ${{ runner.os }}-buildx-nginx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-nginx-

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        uses: docker/build-push-action@v2
        id: nginx-image
        with:
          context: ./front
          platforms: linux/arm64
          push: true
          file: ./front/Dockerfile
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPO_NGINX }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache-nginx
          cache-to: type=local,dest=/tmp/.buildx-cache-nginx-new,mode=max

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache-nginx
          mv /tmp/.buildx-cache-nginx-new /tmp/.buildx-cache-nginx

  deploy:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    needs: [build_rails, build_nginx]
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json

      - name: Render Amazon ECS task definition for first container
        id: render-container-rails
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME_RAILS }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPO_RAILS }}:latest

      - name: Modify Amazon ECS task definition with second container
        id: render-container-nginx
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-container-rails.outputs.task-definition }}
          container-name: ${{ env.CONTAINER_NAME_NGINX }}
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.AWS_ECR_REPO_NGINX }}:latest

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-container-nginx.outputs.task-definition }}
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.CLUSTER_NAME }}
          wait-for-service-stability: true
